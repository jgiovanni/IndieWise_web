var PUSHWOOSH_SERVICE_WORKER_URL="/service-worker.js";var PUSHWOOSH_DEFAULT_IMAGE="https://cp.pushwoosh.com/img/logo-medium.png";var PUSHWOOSH_DEFAULT_TITLE="Title";var PushwooshBase=function(){this.APPLICATION_CODE="XXXXX-XXXXX";this.pushwooshUrl="https://cp.pushwoosh.com/json/1.3/"};PushwooshBase.prototype.getBrowserVersion=function(){var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];if(/trident/i.test(M[1])){tem=/\brv[ :]+(\d+)/g.exec(ua)||[];return"IE "+(tem[1]||"")}if(M[1]==="Chrome"){tem=ua.match(/\bOPR\/(\d+)/);if(tem!=null)return"Opera "+tem[1]}M=M[2]?[M[1],M[2]]:[navigator.appName,navigator.appVersion,"-?"];if((tem=ua.match(/version\/([.\d]+)/i))!=null)M.splice(1,1,tem[1]);return M.join(" ")};PushwooshBase.prototype.pushwooshGetDeviceName=function(){if(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)){return"Phone"}else{return"PC"}};PushwooshBase.prototype.pushwooshRegisterDevice=function(pushToken,hwid,encryptionKey){this.doPushwooshApiMethod("registerDevice",{application:this.APPLICATION_CODE,push_token:pushToken,language:window.navigator.language||"en",hwid:hwid,timezone:(new Date).getTimezoneOffset(),device_model:this.getBrowserVersion(),device_name:this.pushwooshGetDeviceName(),device_type:this.pushwooshGetBrowserType(),public_key:encryptionKey})};PushwooshBase.prototype.pushwooshGetBrowserType=function(){var deviceType=11;var isFirefox=navigator.userAgent.toLowerCase().indexOf("firefox")>-1;if(isFirefox){deviceType=12}return deviceType};PushwooshBase.prototype.pushwooshUnregisterDevice=function(hwid){this.doPushwooshApiMethod("unregisterDevice",{application:this.APPLICATION_CODE,hwid:hwid})};PushwooshBase.prototype.pushwooshSetTags=function(hwid,tags){this.doPushwooshApiMethod("setTags",{application:this.APPLICATION_CODE,hwid:hwid,tags:tags})};PushwooshBase.prototype.doPushwooshApiMethod=function(methodName,arguments){console.log("Performing %s call to Pushwoosh with arguments: %s",methodName,JSON.stringify(arguments));try{var url=this.pushwooshUrl+methodName;var params={request:arguments};return fetch(url,{method:"post",headers:{"Content-Type":"text/plain;charset=UTF-8"},body:JSON.stringify(params)})}catch(e){console.log("Exception while %s the device: %s",methodName,e)}};var PushwooshChrome=function(){PushwooshBase.call(this);this.SERVICE_WORKER_URL=PUSHWOOSH_SERVICE_WORKER_URL;this.hwid=""};PushwooshChrome.prototype=Object.create(PushwooshBase.prototype);PushwooshChrome.prototype.constructor=PushwooshChrome;PushwooshChrome.prototype.registerServiceWorker=function(serviceWorkerRegistration){var self=pushwooshInstance;if(!("showNotification"in ServiceWorkerRegistration.prototype)){console.log("Notifications aren't supported.");return}if(Notification.permission==="denied"){console.log("The user has blocked notifications.");return}if(!("PushManager"in window)){console.log("Push messaging isn't supported.");return}serviceWorkerRegistration.pushManager.getSubscription().then(function(subscription){if(!subscription){serviceWorkerRegistration.pushManager.subscribe({name:"push",userVisibleOnly:true}).then(function(subscription){pushToken=self.getPushToken(subscription);self.hwid=self.generateHwid(pushToken);var encryptionKey=self.getEncryptionKey(subscription);self.pushwooshRegisterDevice(pushToken,self.hwid,encryptionKey)}).catch(function(e){if(Notification.permission==="denied"){console.log("Permission for Notifications was denied")}else{console.log("Unable to subscribe to push.",e)}});return}var pushToken=self.getPushToken(subscription);self.hwid=self.generateHwid(pushToken);var encryptionKey=self.getEncryptionKey(subscription);console.log("Ready to get pushes. Push token is "+pushToken+"; Encryption Key is "+encryptionKey)}).catch(function(err){console.log("Error during getSubscription()",err)})};PushwooshChrome.prototype.subscribe=function(){if(!("serviceWorker"in navigator)){console.log("Service workers aren't supported in this browser.");return}navigator.serviceWorker.register(this.SERVICE_WORKER_URL).then(this.registerServiceWorker).catch(function(err){console.log("Error while service worker registration",err)})};PushwooshChrome.prototype.unsubscribe=function(){var self=this;navigator.serviceWorker.ready.then(function(serviceWorkerRegistration){serviceWorkerRegistration.pushManager.getSubscription().then(function(pushSubscription){if(!pushSubscription){return}var pushToken=self.getPushToken(pushSubscription);pushSubscription.unsubscribe().then(function(successful){self.pushwooshUnregisterDevice(self.generateHwid(pushToken))}).catch(function(e){console.log("Unsubscription error: ",e)})}).catch(function(e){console.error("Error thrown while unsubscribing from push messaging.",e)})})};PushwooshChrome.prototype.setTags=function(tags){var self=this;navigator.serviceWorker.ready.then(function(serviceWorkerRegistration){serviceWorkerRegistration.pushManager.getSubscription().then(function(pushSubscription){if(!pushSubscription){return}var pushToken=self.getPushToken(pushSubscription);self.hwid=self.generateHwid(pushToken);self.pushwooshSetTags(self.hwid,tags)}).catch(function(e){console.error("Error thrown while setTags from push messaging.",e)})})};PushwooshChrome.prototype.createUUID=function(pushToken){var s=[];var hexDigits="0123456789abcdef";for(var i=0;i<32;i++){var charCode="0";if(pushToken.length-i-1>=0){charCode=pushToken.charCodeAt(pushToken.length-i-1)}s[i]=hexDigits.substr(charCode%hexDigits.length,1)}return s.join("")};PushwooshChrome.prototype.generateHwid=function(pushToken){var hwid=this.APPLICATION_CODE+"_"+this.createUUID(pushToken);return hwid};PushwooshChrome.prototype.getEncryptionKey=function(pushSubscription){var rawKey=pushSubscription.getKey?pushSubscription.getKey("p256dh"):"";var key=rawKey?btoa(String.fromCharCode.apply(null,new Uint8Array(rawKey))):"";return key};PushwooshChrome.prototype.getPushToken=function(pushSubscription){var pushToken="";if(pushSubscription.subscriptionId){pushToken=pushSubscription.subscriptionId;console.log("Chrome 42, 43, 44: "+pushToken)}else if(this.pushwooshGetBrowserType()===12){pushToken=pushSubscription.endpoint;console.log("Firefox: "+pushToken)}else{pushToken=pushSubscription.endpoint.split("/").pop();console.log("Chrome 45+: "+pushToken)}return pushToken};var PWServiceWorker=function(){PushwooshBase.call(this);this.hwid="";this.pushDefaultImage=PUSHWOOSH_DEFAULT_IMAGE;this.pushDefaultTitle=PUSHWOOSH_DEFAULT_TITLE;this.pushDefaultUrl="/";this.DEBUG_MODE=false;this.deviceType=this.pushwooshGetBrowserType()};PWServiceWorker.prototype=Object.create(PushwooshChrome.prototype);PWServiceWorker.prototype.constructor=PWServiceWorker;PWServiceWorker.prototype.closeNotifications=function(){self.registration.getNotifications().then(function(notifications){for(var i=0;i<notifications.length;++i){notifications[i].close()}})};PWServiceWorker.prototype.pushReceivedWithData=function(event){var thisO=pwServiceWorker;if(!event||!event.data){console.log("pushReceivedWithData: no data available!");return null}var content=event.data.text();content=JSON.parse(content);var title=content["header"]||thisO.pushDefaultTitle;var message=content["body"];var icon=content["i"]||thisO.pushDefaultImage;var messageHash=content["p"];var url=content["l"]||thisO.pushDefaultUrl;var tag={url:url,messageHash:messageHash};return self.registration.showNotification(title,{body:message,icon:icon,tag:JSON.stringify(tag)})};PWServiceWorker.prototype.createPushFromResponse=function(response){var thisO=pwServiceWorker;if(response.status!==200){console.log("Looks like there was a problem. Status Code: "+response.status);throw new Error}return response.json().then(function(data){if(!data.response.notification){console.error("The API returned an error.",data.error);throw new Error}var notification=data.response.notification;console.log(notification);var title=notification.chromeTitle||thisO.pushDefaultTitle;var message=notification.content;var icon=notification.chromeIcon||thisO.pushDefaultImage;var messageHash=notification.messageHash;var url=notification.url||thisO.pushDefaultUrl;var tag={url:url,messageHash:messageHash};return self.registration.showNotification(title,{body:message,icon:icon,tag:JSON.stringify(tag)})})};PWServiceWorker.prototype.fetchLastPushMessage=function(subscription){var thisO=pwServiceWorker;if(subscription){thisO.hwid=thisO.generateHwid(thisO.getPushToken(subscription))}console.log("Try get last message with hwid: "+thisO.hwid);return thisO.doPushwooshApiMethod("getLastMessage",{application:thisO.APPLICATION_CODE,hwid:thisO.hwid,device_type:thisO.deviceType})};PWServiceWorker.prototype.pushReceived=function(event){var thisO=pwServiceWorker;console.info("Recv'd a push message: ",JSON.stringify(event));if(event.data){console.info("event with data!");thisO.pushReceivedWithData(event);return}event.waitUntil(self.registration.pushManager.getSubscription().then(thisO.fetchLastPushMessage).then(thisO.createPushFromResponse).catch(function(err){console.error("Unable to retrieve data",err);if(thisO.DEBUG_MODE){var title="An error occurred";var message="We were unable to get the information for this push message";var notificationTag="notification-error";return self.registration.showNotification(title,{body:message,tag:notificationTag})}}))};PWServiceWorker.prototype.sendPushStat=function(subscription,tag){var thisO=pwServiceWorker;if(subscription){thisO.hwid=thisO.generateHwid(thisO.getPushToken(subscription))}console.info("sending stats: "+thisO.hwid);return thisO.doPushwooshApiMethod("pushStat",{application:thisO.APPLICATION_CODE,hwid:thisO.hwid,hash:tag.messageHash})};PWServiceWorker.prototype.notificationClicked=function(event){var thisO=pwServiceWorker;var tag=event.notification.tag;tag=JSON.parse(tag);console.log(event);console.log("Push open with tag = "+event.notification.tag);event.waitUntil(self.registration.pushManager.getSubscription().then(function(subscription){return thisO.sendPushStat(subscription,tag)}).then(function(response){console.log(response)}));event.notification.close();return clients.openWindow(tag.url)};var pwServiceWorker=new PWServiceWorker;self.addEventListener("push",pwServiceWorker.pushReceived);self.addEventListener("notificationclick",pwServiceWorker.notificationClicked);self.addEventListener("activate",function(event){event.waitUntil(caches.keys().then(function(cacheNames){return Promise.all(cacheNames.map(function(cacheName){return caches.delete(cacheName)}))}))});