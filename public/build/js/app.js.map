{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nfunction loadScript(url, callback) {\n\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n\n    script.onload = function () {\n        callback();\n    };\n    script.src = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n}\n\nif (window.chrome && window.chrome.cookies) {\n    loadScript('/pushwoosh-web-pushes-http-sdk.js?pw_application_code=73409-786EB', function () {});\n} else {\n    loadScript('/pushwoosh-web-notifications.js', function () {});\n}\n\njQuery.noConflict();\njQuery(document).foundation();\njQuery(document).ready(function (jQuery) {\n    \"use strict\";\n    /*Layer slider trigger*/\n    /*jQuery(\"#layerslider\").layerSlider({\r\n     responsive: false,\r\n     responsiveUnder: 1280,\r\n     layersContainer: 1280,\r\n     skin: 'noskin',\r\n     hoverPrevNext: false,\r\n     skinsPath: '../layerslider/skins/'\r\n     });*/\n    //login register click\n    jQuery(\".loginReg\").on(\"click\", function (e) {\n        e.preventDefault();\n        jQuery(this).next().slideToggle();\n        jQuery(this).toggleClass(\"active\");\n    });\n\n    //search bar\n    jQuery(\".search.end\").on(\"click\", function () {\n        if (jQuery(this).children().hasClass(\"fa-search\")) {\n            jQuery(this).children().removeClass(\"fa-search\");\n            jQuery(this).children().addClass(\"fa-times\");\n        } else {\n            jQuery(this).children().removeClass(\"fa-times\");\n            jQuery(this).children().addClass(\"fa-search\");\n        }\n        jQuery(this).toggleClass(\"search-active\");\n        jQuery(\"#search-bar\").slideToggle();\n    });\n\n    //grid system\n    /*jQuery(\".grid-system > a\").on(\"click\", function(event){\r\n     event.preventDefault();\r\n     var selector = jQuery(this).parent().parent().next().find('div.item');\r\n     var classStr = jQuery(selector).attr('class'),\r\n     lastClass = classStr.substr( classStr.lastIndexOf(' ') + 1);\r\n     jQuery(selector)\r\n     // Remove last class\r\n     .removeClass(lastClass)\r\n     // Put back .item class + the clicked elements class with the added prefix \"group-item-\".\r\n     .addClass('item group-item-' + jQuery(this).attr('class') );\r\n     if(jQuery(this).hasClass(\"current\")!== true)\r\n     {\r\n     jQuery('.grid-system > a').removeClass(\"current\");\r\n     jQuery(this) .addClass(\"current\");\r\n     }\r\n     });*/\n\n    //back to top\n    var backtotop = '#back-to-top';\n    if (jQuery(backtotop).length) {\n        var scrollTrigger = 100,\n            // px\n        backToTop = function backToTop() {\n            var scrollTop = jQuery(window).scrollTop();\n            if (scrollTop > scrollTrigger) {\n                jQuery(backtotop).addClass('show');\n            } else {\n                jQuery(backtotop).removeClass('show');\n            }\n        };\n        backToTop();\n        jQuery(window).on('scroll', function () {\n            backToTop();\n        });\n        jQuery('#back-to-top').on('click', function (e) {\n            e.preventDefault();\n            jQuery('html,body').animate({\n                scrollTop: 0\n            }, 700);\n        });\n    }\n    //newsTicker\n    /*jQuery('#newsBar').inewsticker({\r\n     speed       : 2500,\r\n     effect      : 'fade',\r\n     dir         : 'ltr',\r\n     font_size   : 13,\r\n     color       : '#fff',\r\n     font_family : 'arial',\r\n     delay_after : 1000\r\n     });*/\n\n    //show more and less\n    /*jQuery('.showmore_one').showMore({\r\n     speedDown: 300,\r\n     speedUp: 300,\r\n     height: '165px',\r\n     showText: 'Show more',\r\n     hideText: 'Show less'\r\n     });*/\n\n    /*jQuery(\".reply\").each(function(){\r\n     if(jQuery(this).parent().next().length > 0){\r\n     jQuery(this).html('Hide replies <i class=\"fa fa-angle-up\"></i>');\r\n     }\r\n     });\r\n     //comments reply hide show\r\n     jQuery(\".reply\").on('click', function(){\r\n     if(jQuery(this).parent().next().length > 0){\r\n     jQuery(this).parent().nextAll().slideToggle();\r\n     //jQuery(this).html(jQuery(this).text() === 'Hide replies' ? 'Show replies' : 'Hide replies');\r\n     if(jQuery(this).hasClass('hide-reply')){\r\n     jQuery(this).removeClass('hide-reply');\r\n     jQuery(this).html('show replies <i class=\"fa fa-angle-down\"></i>');\r\n     }else {\r\n     jQuery(this).addClass('hide-reply');\r\n     jQuery(this).html('Hide replies <i class=\"fa fa-angle-up\"></i>');\r\n     }\r\n     }\r\n     });*/\n\n    //register form\n    jQuery(\"div.social-login\").mouseenter(function () {\n        jQuery(\"i.arrow-left\").addClass(\"active\");\n    }).mouseleave(function () {\n        jQuery(\"i.arrow-left\").removeClass(\"active\");\n    });\n    jQuery(\"div.register-form\").mouseenter(function () {\n        jQuery(\"i.arrow-right\").addClass(\"active\");\n    }).mouseleave(function () {\n        jQuery(\"i.arrow-right\").removeClass(\"active\");\n    });\n\n    //vertical thumb slider\n    var thumb = jQuery('.thumb-slider .thumbs').find('.ver-thumbnail');\n    jQuery(thumb).on('click', function () {\n        var id = jQuery(this).attr('id');\n        //alert(id);\n        jQuery('.image').eq(0).show();\n        jQuery('.image').hide();\n        jQuery('.' + id).fadeIn();\n    });\n    var $par = jQuery('.thumb-slider .thumbs .thumbnails').scrollTop(0);\n    jQuery('.thumb-slider .thumbs a').click(function (e) {\n        e.preventDefault(); // Prevent defautl Anchors behavior\n        var n = jQuery(this).hasClass(\"down\") ? \"+=200\" : \"-=200\"; // Direction\n        $par.animate({ scrollTop: n });\n    });\n\n    //tab panel\n    /*jQuery('[data-tab]').on('click', function (e) {\r\n     jQuery(this).addClass('active').siblings('[data-tab]').removeClass('active');\r\n     jQuery(this).siblings('[data-content=' + jQuery(this).data('tab') + ']').addClass('active').siblings('[data-content]').removeClass('active');\r\n     e.preventDefault();\r\n     });*/\n});\n(function () {\n    'use strict';\n    angular.module('underscore', []).factory('_', function () {\n        return window.___; // assumes underscore has already been loaded on the page\n    });\n\n    angular.module('IndieWise', ['ngMaterial', 'mm.foundation', 'angucomplete-alt', 'ngMessages', 'cloudinary', 'underscore', 'angularMoment', 'videosharing-embed', 'angular-loading-bar', 'LocalForageModule', 'ui.router', 'angular-google-analytics', 'flow', 'angular-filepicker', 'backand', 'pascalprecht.translate', '720kb.socialshare', 'ngAnimate-animate.css', 'IndieWise.controllers', 'IndieWise.services', 'IndieWise.directives', 'IndieWise.filters', 'IndieWise.utilities']).config(['flowFactoryProvider', function (flowFactoryProvider) {\n        flowFactoryProvider.defaults = {\n            //target: 'utils/upload.php',\n            query: {\n                upload_preset: \"r0kuyqef\"\n            },\n            target: 'https://api.cloudinary.com/v1_1/indiewise/upload',\n            permanentErrors: [404, 500, 501],\n            maxChunkRetries: 1,\n            chunkRetryInterval: 5000,\n            simultaneousUploads: 1,\n            singleFile: true\n        };\n        /*flowFactoryProvider.on('catchAll', function (event) {\r\n         console.log('catchAll', arguments);\r\n         })*/\n    }]).config(function (filepickerProvider) {\n        filepickerProvider.setKey('APbjTx44SlSuCI6P58jwvz');\n    }).config(['cloudinaryProvider', function (cloudinaryProvider) {\n        cloudinaryProvider.set(\"cloud_name\", \"indiewise\").set(\"upload_preset\", \"r0kuyqef\");\n    }]).config(['$compileProvider', function ($compileProvider) {\n        // significant performance boost\n        $compileProvider.debugInfoEnabled(false);\n    }]).constant('API', window.API || 'http://52.207.215.154/api/').constant('angularMomentConfig', {\n        timezone: 'UTC'\n    }).config(function (AnalyticsProvider) {\n        // Add configuration code as desired - see below\n        AnalyticsProvider.setAccount('UA-27155404-17')\n        // Remove prefix on launch\n        .trackPrefix('alpha');\n    }).config(function (BackandProvider) {\n        BackandProvider.setAppName('indiewise');\n        // BackandProvider.setSignUpToken('ed37a6ff-ff08-4d3a-b82c-5f29f9a36c05');\n        // BackandProvider.setAnonymousToken('6ef61886-faa0-4f42-bf4d-d827339accfe');\n        BackandProvider.runSocket(false); //enable the web sockets that makes the database realtime\n    }).config(['$httpProvider', function ($httpProvider) {\n        $httpProvider.interceptors.push('authInterceptor');\n    }]).factory('authInterceptor', ['$q', '$injector', '$localForage', '$location', 'API', function ($q, $injector, $localForage, $location, API) {\n        return {\n            'request': function request(config) {\n                var defer = $q.defer();\n                config.headers = config.headers || {};\n                $localForage.getItem('token').then(function (token) {\n                    if (config.url.indexOf(API) === 0 && token) {\n                        config.headers.Authorization = 'Bearer ' + token;\n                    }\n                    defer.resolve(config);\n                });\n                return defer.promise;\n            },\n            'response': function response(_response) {\n                // only contains \"content-type\" and \"cache-control\"\n                console.log(_response.headers());\n                return _response;\n            },\n            'responseError': function responseError(response) {\n                if (response.status === 401 || response.status === 403) {\n                    //$location.path('/sign-in');\n                }\n                return $q.reject(response);\n            }\n        };\n    }]).config(function ($mdThemingProvider, $mdIconProvider) {\n        // Emoticons\n        $mdIconProvider.icon(\"emotion\", \"./assets/svg/emotion.svg\", 120).icon(\"angry\", \"./assets/svg/emoticons/angry.svg\", 120).icon(\"annoyed\", \"./assets/svg/emoticons/annoyed.svg\", 120).icon(\"big-smile\", \"./assets/svg/emoticons/big-smile.svg\", 120).icon(\"bored\", \"./assets/svg/emoticons/bored.svg\", 120).icon(\"confused\", \"./assets/svg/emoticons/confused.svg\", 120).icon(\"crying\", \"./assets/svg/emoticons/crying.svg\", 120).icon(\"disappointed\", \"./assets/svg/emoticons/disappointed.svg\", 120).icon(\"emotional\", \"./assets/svg/emoticons/emotional.svg\", 120).icon(\"grinning\", \"./assets/svg/emoticons/grinning.svg\", 120).icon(\"happy\", \"./assets/svg/emoticons/happy.svg\", 120).icon(\"hehe\", \"./assets/svg/emoticons/hehe.svg\", 120).icon(\"hopeful\", \"./assets/svg/emoticons/hopeful.svg\", 120).icon(\"interested\", \"./assets/svg/emoticons/interested.svg\", 120).icon(\"joking\", \"./assets/svg/emoticons/joking.svg\", 120).icon(\"kiss\", \"./assets/svg/emoticons/kiss.svg\", 120).icon(\"love\", \"./assets/svg/emoticons/love.svg\", 120).icon(\"mad\", \"./assets/svg/emoticons/mad.svg\", 120).icon(\"meh\", \"./assets/svg/emoticons/meh.svg\", 120).icon(\"mute\", \"./assets/svg/emoticons/mute.svg\", 120).icon(\"nerdy\", \"./assets/svg/emoticons/nerdy.svg\", 120).icon(\"neutral\", \"./assets/svg/emoticons/neutral.svg\", 120).icon(\"ninja\", \"./assets/svg/emoticons/ninja.svg\", 120).icon(\"nostalgic\", \"./assets/svg/emoticons/nostalgic.svg\", 120).icon(\"oh-really\", \"./assets/svg/emoticons/oh-really.svg\", 120).icon(\"sad\", \"./assets/svg/emoticons/sad.svg\", 120).icon(\"sad-tear\", \"./assets/svg/emoticons/sad-tear.svg\", 120).icon(\"sarcastic\", \"./assets/svg/emoticons/sarcastic.svg\", 120).icon(\"sexy\", \"./assets/svg/emoticons/sexy.svg\", 120).icon(\"shocked\", \"./assets/svg/emoticons/shocked.svg\", 120).icon(\"silent\", \"./assets/svg/emoticons/silent.svg\", 120).icon(\"silly\", \"./assets/svg/emoticons/silly.svg\", 120).icon(\"smile\", \"./assets/svg/emoticons/smile.svg\", 120).icon(\"sympathetic\", \"./assets/svg/emoticons/sympathetic.svg\", 120).icon(\"wink\", \"./assets/svg/emoticons/wink.svg\", 120).icon(\"woah\", \"./assets/svg/emoticons/woah.svg\", 120).icon(\"matureSmall\", \"./assets/svg/OFLC_small_M.svg\", 120).icon(\"matureLarge\", \"./assets/svg/OFLC_large_M.svg\", 120);\n    }).config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function ($stateProvider, $urlRouterProvider, $locationProvider) {\n\n        $urlRouterProvider.when('', '/home');\n        $urlRouterProvider.when('/', '/home');\n        $stateProvider.state('home', {\n            url: '/home',\n            authenticate: false,\n            templateUrl: './src/home/view/index.html',\n            controller: 'HomeCtrl as Home'\n        }).state('browse', {\n            url: '/browse?q&sort&types&genres',\n            authenticate: false,\n            templateUrl: './src/browse/view/index.html',\n            controller: 'BrowseCtrl as Browse'\n        }).state('latest', {\n            url: '/latest',\n            authenticate: false,\n            templateUrl: './src/latest/view/index.html',\n            controller: 'LatestCtrl as LC'\n        }).state('video_critique', {\n            url: '/{video_url_id}/critique/{url_id}',\n            authenticate: false,\n            templateUrl: './src/common/critique.html',\n            controller: 'VideoCritiqueCtrl as VCC',\n            resolve: {\n                Critique: ['$stateParams', 'DataService', '$q', function ($stateParams, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getCritiqueByUrlId', { urlId: $stateParams.url_id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n\n                    return deferred.promise;\n                }]\n            }\n        }).state('video_critique-edit', {\n            url: '/{video_url_id}/critique/{url_id}/edit',\n            authenticate: true,\n            templateUrl: './src/common/critique-edit.html',\n            controller: 'VideoCritiqueEditCtrl',\n            resolve: {\n                Critique: ['AuthService', '$stateParams', 'DataService', '$q', function (AuthService, $stateParams, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getCritiqueByUrlId', { urlId: $stateParams.url_id }).then(function (result) {\n                        if (result.data[0].author === AuthService.currentUser.id) {\n                            deferred.resolve(result);\n                        } else {\n                            deferred.reject('Not Owner');\n                        }\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        })\n        // Authenticated Pages\n        .state('user', {\n            url: '/user/{url_id}',\n            authenticate: true,\n            abstract: true,\n            templateUrl: './src/auth/user.html',\n            controller: 'UserCtrl as UserC',\n            resolve: {\n                User: ['$stateParams', 'DataService', '$q', function ($stateParams, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserByUrlId', { urlId: $stateParams.url_id }, false).then(function (result) {\n                        deferred.resolve(result.data[0]);\n                    });\n                    return deferred.promise;\n                }],\n                UserStats: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('countUserStats', { id: User.id }).then(function (response) {\n                        deferred.resolve(response);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('user.about', {\n            url: '/about',\n            templateUrl: './src/auth/user-about.html',\n            controller: 'UserAboutController as UserAboutCtrl'\n        }).state('user.videos', {\n            url: '/videos',\n            templateUrl: './src/auth/user-videos.html',\n            controller: 'UserVideosController as UserVideosCtrl',\n            resolve: {\n                Videos: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.getList('Project', [{ fieldName: \"createdAt\", order: \"desc\" }], [{ fieldName: \"owner\", operator: \"in\", value: User.id }, { fieldName: \"unlist\", operator: \"is\", value: false }], 20, true, true, 1).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('user.critiques', {\n            url: '/critiques',\n            templateUrl: './src/auth/user-critiques.html',\n            controller: 'UserCritiquesController as UserCritiquesCtrl',\n            resolve: {\n                Critiques: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserCritiques', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Critiqued: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserCritiqued', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('user.reactions', {\n            url: '/reactions',\n            templateUrl: './src/auth/user-reactions.html',\n            controller: 'UserReactionsController as UserReactionsCtrl',\n            resolve: {\n                Reactions: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserReactions', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Reacted: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserReacted', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('user.awards', {\n            url: '/awards',\n            templateUrl: './src/auth/user-awards.html',\n            controller: 'UserAwardsController as UserAwardsCtrl',\n            resolve: {\n                Awards: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserAwards', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Nominations: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserNominations', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Nominated: ['User', 'DataService', '$q', function (User, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserNominated', { id: User.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile', {\n            url: '/profile',\n            authenticate: true,\n            abstract: true,\n            templateUrl: './src/auth/profile.html',\n            controller: 'ProfileCtrl as Profile',\n            resolve: {\n                User: ['AuthService', '$q', function (AuthService, $q) {\n                    var deferred = $q.defer();\n                    AuthService.getCurrentUser().then(function (response) {\n                        //console.log(response);\n                        deferred.resolve(response);\n                    });\n                    return deferred.promise;\n                }],\n                UserStats: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('users/countUserStats').then(function (response) {\n                        deferred.resolve(response.data);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.about', {\n            url: '/about',\n            authenticate: true,\n            templateUrl: './src/auth/profile-about.html',\n            controller: 'ProfileAboutController as ProfileAboutCtrl'\n        }).state('profile.upload', {\n            url: '/upload',\n            authenticate: true,\n            templateUrl: './src/auth/profile-upload.html',\n            controller: 'ProfileUploadController as UC'\n        }).state('profile.videos', {\n            url: '/videos',\n            authenticate: true,\n            templateUrl: './src/auth/profile-videos.html',\n            controller: 'ProfileVideosController as ProfileVideosCtrl',\n            resolve: {\n                Videos: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('projects', {\n                        owner: AuthService.currentUser.id,\n                        sort: 'created_at',\n                        per_page: 50\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.videos-edit', {\n            url: '/videos/{url_id}/edit',\n            authenticate: true,\n            templateUrl: './src/auth/profile-videos-edit.html',\n            controller: 'ProfileVideoEditCtrl as VEC',\n            resolve: {\n                Project: ['AuthService', '$stateParams', 'DataService', '$q', function (AuthService, $stateParams, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.item('projects', result.data[0].id, true, false, 1).then(function (res) {\n                        deferred.resolve(res);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.critiques', {\n            url: '/critiques',\n            authenticate: true,\n            templateUrl: './src/auth/profile-critiques.html',\n            controller: 'ProfileCritiquesController as ProfileCritiquesCtrl',\n            resolve: {\n                Critiques: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('critiques', { user: AuthService.currentUser.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Critiqued: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('critiques', { notUser: AuthService.currentUser.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.reactions', {\n            url: '/reactions',\n            authenticate: true,\n            templateUrl: './src/auth/profile-reactions.html',\n            controller: 'ProfileReactionsController as ProfileReactionsCtrl',\n            resolve: {\n                Reactions: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('reactions', {\n                        user: AuthService.currentUser.id,\n                        include: 'user,project'\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Reacted: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('reactions', {\n                        notUser: AuthService.currentUser.id,\n                        include: 'user,project'\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.awards', {\n            url: '/awards',\n            authenticate: true,\n            templateUrl: './src/auth/profile-awards.html',\n            controller: 'ProfileAwardsController as ProfileAwardsCtrl',\n            resolve: {\n                Awards: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('wins', { user: AuthService.currentUser.id }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Nominations: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('nominations', {\n                        user: AuthService.currentUser.id,\n                        include: 'user,project,award'\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                Nominated: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('nominations', {\n                        notUser: AuthService.currentUser.id,\n                        include: 'user,project,award'\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.playlists  ', {\n            url: '/playlists',\n            authenticate: true,\n            templateUrl: './src/auth/profile-playlists.html',\n            controller: 'ProfilePlaylistsController as ProfilePlaylistsCtrl',\n            resolve: {\n                Playlists: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.collection('playlists', [], [{ fieldName: 'user', operator: 'in', value: AuthService.currentUser.id }], 50, true, false).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('profile.settings', {\n            url: '/settings',\n            authenticate: true,\n            templateUrl: './src/auth/profile-settings.html',\n            controller: 'ProfileSettingsController as PSC',\n            resolve: {\n                Genres: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.getList('Genres', [], [{ fieldName: \"user\", operator: \"in\", value: AuthService.currentUser.id }], 20, false, false, 1).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }],\n                UserTypes: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.getList('UserTypes', [], [{ fieldName: \"user\", operator: \"in\", value: AuthService.currentUser.id }], 20, false, false, 1).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('messages', {\n            url: '/messages',\n            authenticate: true,\n            templateUrl: './src/auth/messages.html',\n            controller: 'MessagesCtrl as Msgs',\n            resolve: {\n                Conversations: ['AuthService', 'DataService', '$q', function (AuthService, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.query('getUserConversations', {\n                        username: AuthService.currentUser.username\n                    }).then(function (result) {\n                        deferred.resolve(result);\n                    });\n                    return deferred.promise;\n                }]\n            }\n        }).state('messages.message', {\n            authenticate: true,\n            templateUrl: './src/auth/messages.html',\n            controller: 'MessagesCtrl as Msgs'\n        })\n        /*.state('notifications', {\r\n         url: '/notifications',\r\n         authenticate: true,\r\n         templateUrl: './src/auth/notifications.html',\r\n         controller: 'NotificationsCtrl as NC'\r\n         })*/\n\n        // Auth Pages\n        .state('register', {\n            url: '/register',\n            authenticate: false,\n            templateUrl: './src/auth/register.html',\n            controller: 'RegisterCtrl as RC'\n        }).state('sign_in', {\n            url: '/sign-in',\n            authenticate: false,\n            templateUrl: './src/auth/sign-in.html',\n            controller: 'SignInCtrl as SIC'\n        }).state('reset_password', {\n            url: '/reset-password?email&token',\n            authenticate: false,\n            templateUrl: './src/auth/reset-password.html',\n            controller: 'ForgotPasswordCtrl as FPC'\n        })\n\n        // Static Pages\n        .state('about', {\n            url: '/about',\n            authenticate: false,\n            templateUrl: './src/static/about.html'\n        }).state('contact', {\n            url: '/contact',\n            authenticate: false,\n            templateUrl: './src/static/contact.html',\n            controller: 'ContactPageCtrl as CC'\n        }).state('tos', {\n            url: '/terms-of-service',\n            authenticate: false,\n            templateUrl: './src/static/tos.html'\n        }).state('advertise', {\n            url: '/advertise',\n            authenticate: false,\n            templateUrl: './src/static/advertise.html'\n        }).state('privacy', {\n            url: '/privacy-policy',\n            authenticate: false,\n            templateUrl: './src/static/privacy.html'\n        }).state('404', {\n            url: '/404',\n            authenticate: false,\n            templateUrl: './src/static/404.html'\n        })\n\n        // Video Pages\n        .state('video', {\n            url: '/{url_id:[0-9]{13}}',\n            authenticate: false,\n            templateUrl: './src/common/video.html',\n            controller: 'VideoCtrl as VC',\n            resolve: {\n                Project: ['$stateParams', 'DataService', '$q', function ($stateParams, DataService, $q) {\n                    var deferred = $q.defer();\n                    DataService.item('projects', $stateParams.url_id, '').then(function (result) {\n                        deferred.resolve(result.data.data);\n                    });\n\n                    return deferred.promise;\n                }]\n            }\n        });\n\n        $urlRouterProvider.otherwise('/404');\n        $locationProvider.html5Mode({ enabled: false, requireBase: true, rewriteLinks: true });\n    }]).constant('Config', {\n        streamApiKey: 'pftnxtwf4yuz',\n        streamApiSecret: 'k563yw7srhjeubw6xbx26def8xta47ume75uqaaewh6k4qyzj4mr3cfcmbts6cf3',\n        streamApp: '6408'\n    }).run(['$rootScope', '$state', '$stateParams', 'AuthService', 'UtilsService', 'DataService', '$http', '$timeout', '$transitions', 'Backand', function ($rootScope, $state, $stateParams, AuthService, UtilsService, DataService, $http, $timeout, $transitions, Backand) {\n        FastClick.attach(document.body);\n        $rootScope.AppData = {\n            User: AuthService.currentUser,\n            //UserData: AuthService.currentUser,\n            Notifications: {\n                loaded: 'indeterminate'\n            },\n            NotificationsFeed: {\n                loaded: 'indeterminate'\n            },\n            MessageNotifications: {\n                loaded: 'indeterminate'\n            },\n            searchText: ''\n        };\n        $rootScope.$state = window.thisState = $state;\n        $rootScope.metadata = {\n            title: '',\n            description: '',\n            image: '',\n            url: ''\n        };\n        $rootScope.$stateParams = $stateParams;\n        $rootScope.isViewLoading = false;\n\n        $rootScope.today = moment().toDate();\n\n        $rootScope.listenNotifications = function (username) {\n            $rootScope.refreshNotifications(username);\n            Backand.on('notifications', function (data) {\n                console.log('Notifications: ', data);\n                $rootScope.refreshNotifications(username);\n            });\n        };\n\n        $rootScope.refreshNotifications = function (id) {\n            $rootScope.AppData.Notifications.loaded = 'indeterminate';\n            DataService.query('getUserNotifications', {\n                username: id\n            }).then(function (res) {\n                console.log(res.data);\n                $rootScope.AppData.Notifications = {\n                    loaded: '',\n                    list: res.data,\n                    unseen: _.where(res.data, { seen: false }).length,\n                    unread: 0\n                };\n                console.log($rootScope.AppData.Notifications);\n            });\n        };\n\n        $rootScope.getMessagesFeed = function (feed) {\n            feed.get({ limit: 10 }, function (error, response, body) {\n                console.log('Messages Notifications: ', body);\n                try {\n                    //var data = UtilsService.enrichRawNotifications(body.results);\n                    //console.log(data);\n                    $rootScope.AppData.MessageNotifications = {\n                        loaded: '',\n                        list: body.results,\n                        unseen: body.unseen,\n                        unread: body.unread\n                    };\n                    console.log($rootScope.AppData.MessageNotifications);\n                } catch (e) {\n                    console.log(e);\n                }\n            });\n        };\n\n        /*var endWatch = $rootScope.$watch('AppData.User', function (newValue, oldValue) {\r\n         if (newValue && angular.isString(newValue.id)) {\r\n         console.log('User Logged In');\r\n         $rootScope.listenNotifications(newValue.username);\r\n         endWatch();\r\n         }\r\n         });*/\n\n        // loading animation\n        $rootScope.setLoading = function () {\n            /*var opts = {\r\n             lines: 13 // The number of lines to draw\r\n             , length: 9 // The length of each line\r\n             , width: 7 // The line thickness\r\n             , radius: 42 // The radius of the inner circle\r\n             , scale: 1 // Scales overall size of the spinner\r\n             , corners: 1 // Corner roundness (0..1)\r\n             , color: '#000' // #rgb or #rrggbb or array of colors\r\n             , opacity: 0.25 // Opacity of the lines\r\n             , rotate: 0 // The rotation offset\r\n             , direction: 1 // 1: clockwise, -1: counterclockwise\r\n             , speed: 1 // Rounds per second\r\n             , trail: 60 // Afterglow percentage\r\n             , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\r\n             , zIndex: 2e9 // The z-index (defaults to 2000000000)\r\n             , className: 'spinner' // The CSS class to assign to the spinner\r\n             , top: '-50%' // Top position relative to parent\r\n             , left: '50%' // Left position relative to parent\r\n             , shadow: true // Whether to render a shadow\r\n             , hwaccel: true // Whether to use hardware acceleration\r\n             , position: 'absolute' // Element positioning\r\n             };\r\n             var target = document.getElementById('alerts');\r\n             $rootScope.spinner = window.spinner = new Spinner(opts).spin(target);*/\n            $rootScope.isViewLoading = true;\n        };\n        $rootScope.unsetLoading = function () {\n            $rootScope.isViewLoading = false;\n            //$rootScope.spinner.stop();\n        };\n\n        // State transition hooks\n        $transitions.onBefore({}, function ($transition$) {\n            $rootScope.setLoading();\n        });\n\n        $transitions.onStart({ to: 'register', from: '*' }, function ($transition$, $state, AuthService) {\n            return AuthService.currentUser ? $state.target('home') : true;\n        });\n        $transitions.onStart({ to: 'sign_in', from: '*' }, function ($transition$, $state, AuthService) {\n            return AuthService.currentUser ? $state.target('home') : true;\n        });\n        $transitions.onStart({ to: 'reset_password', from: '*' }, function ($transition$, $state, AuthService) {\n            return AuthService.currentUser ? $state.target('home') : true;\n        });\n        $transitions.onStart({\n            to: function to(state) {\n                return !!state.authenticate;\n            }\n        }, function ($transition$, $state, AuthService) {\n            return AuthService.currentUser ? true : AuthService.getCurrentUser().then(function () {\n                return true;\n            }, function () {\n                return $state.target('sign_in');\n            });\n\n            //return  ? true : $state.target('sign_in');\n        });\n\n        $transitions.onSuccess({}, function () {\n            $rootScope.unsetLoading();\n            $timeout(function () {\n                jQuery(document).foundation();\n            }, 100);\n            //Analytics.trackPage($location.path());\n        });\n\n        $transitions.onError({}, function ($state) {\n            console.log($state);\n        });\n    }]).config(['$localForageProvider', function ($localForageProvider) {\n        $localForageProvider.config({\n            //driver      : 'localStorageWrapper', // if you want to force a driver\n            name: 'iw', // name of the database and prefix for your data, it is \"lf\" by default\n            version: 1.0, // version of the database, you shouldn't have to use this\n            storeName: 'keyvaluepairs', // name of the table\n            description: 'some description'\n        });\n    }]).config(['$sceDelegateProvider', function ($sceDelegateProvider) {\n        $sceDelegateProvider.resourceUrlWhitelist(['self', 'http://getindiewise.com/**', 'http://www.getindiewise.com/**',\n        // 'https://api.backand.com/**',\n        new RegExp('^(http[s]?):\\/\\/(w{3}.)?youtube\\.com/.+$')]);\n    }]);\n})();\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}